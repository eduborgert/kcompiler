options {
    STATIC = false;
}

PARSER_BEGIN(Parser)

public class Parser {
    public Parser(){}

    public void execute() throws ParseException {
        Token token = getNextToken();
        
        while(token.kind != 0){
            token = getNextToken();
        }
    }
    
    public void syntaxAnalisys() throws ParseException {
        program();
    }
}

PARSER_END(Parser)

void program(): {} {
    <DO><THIS><IDENTIFIER><OPEN_BRACKET><CLOSE_BRACKET> declaracoes() <BODY><OPEN_BRACKET> listaDeComandos() <CLOSE_BRACKET> desc()
}

void declaracoes(): {} {
    (<DECLARATION> declaracaoTipoEnumerado())?
}

void declaracaoTipoEnumerado(): {} {
    <TYPE><OPEN_BRACKET> tipoEnumerado() <CLOSE_BRACKET> declaracaoConsteVar() | declaracaoConsteVar1()
}

void identificador(): {} {
    <IDENTIFIER>
}

void identificadorVar(): {} {
    identificador() indice()
}

void tipoEnumerado(): {} {
    identificador() <IS> listaIdentificadores() <DOT> novoTipoEnumerado()
}

void novoTipoEnumerado(): {} {
    (identificador() <IS> listaIdentificadores() <DOT> novoTipoEnumerado())?
}

void listaIdentificadores(): {} {
    identificador() novoIdentificador()
}

void novoIdentificador(): {} {
    (<COMMA> identificador() novoIdentificador())?
}

void listaIdentificadoresVar(): {} {
    identificadorVar() novoIdentificadorVar()
}

void novoIdentificadorVar(): {} {
    (<COMMA> identificadorVar() novoIdentificadorVar())?
}

void declaracaoConsteVar(): {} {
    (<DECLARATION> declaracaoConsteVar1())?
}

void declaracaoConsteVar1(): {} {
    (<CONSTANT><AND><VARIABLE><OPEN_BRACKET> declaraConstVar() <CLOSE_BRACKET>)?
}

void declaraConstVar(): {} {
    <AS> declaraConstVar1()
}

void declaraConstVar1(): {} {
    cons() | var()
}

void cons(): {} {
    cons2() var1()
}

void cons1(): {} {
    (<AS> cons2())?
}

void cons2(): {} {
    <CONSTANT> listaCons()
}

void var(): {} {
    var2() cons1()
}

void var1(): {} {
    (<AS> var2())?
}

void var2(): {} {
    <VARIABLE> listaVar()
}

void listaCons(): {} {
    itemCons() novoItemCons()
}

void itemCons(): {} {
    listaIdentificadores() <IS> tipo() <EQUAL> valor() <DOT>
}

void novoItemCons(): {} {
    (itemCons() novoItemCons())?
}

void listaVar(): {} {
    itemVar() novoItemVar()
}

void itemVar(): {} {
    listaIdentificadoresVar() <IS> tipoVar() <DOT>
}

void novoItemVar(): {} {
    (itemVar() novoItemVar())?
}

void tipo(): {} {
    <INTEGER>|<REAL>|<STRING>|<LOGIC>
}

void tipoVar(): {} {
    tipo() | identificadorVar()
}

void valor(): {} {
    <NUMBER_INTEGER>|<NUMBER_REAL>|<LITERAL_CONSTANT>
}

void listaDeComandos(): {} {
    (cmdAtribuicao() | cmdEntrada() | cmdSaida() | cmdRepeticao() | cmdSelecao() )?
}

void cmdAtribuicao(): {} {
    <DESIGNATE><THIS> listaIdentificadores() <AS> expressao() <DOT> cmds()
}

void cmdEntrada(): {} {
    <READ><THIS><OPEN_BRACKET> listaIdentificadoresVar() <CLOSE_BRACKET> <DOT> cmds()
}

void cmdSaida(): {} {
    <WRITE> cmdSaidaCompleto() <THIS><OPEN_BRACKET> listaSaida() <CLOSE_BRACKET><DOT> cmds()
}

void cmdSaidaCompleto(): {} {
    (<ALL>)?
}

void listaSaida(): {} {
    identificadorSaida() novoIdentificadorSaida()
}

void novoIdentificadorSaida(): {} {
    (<COMMA> identificadorSaida() novoIdentificadorSaida())?
}

void identificadorSaida(): {} {
    identificadorVar() |<NUMBER_INTEGER>|<NUMBER_REAL>|<LITERAL_CONSTANT>
}

void cmdRepeticao(): {} {
    <REPEAT><THIS> expressao() <OPEN_BRACKET> listaDeComandos() <CLOSE_BRACKET><DOT> cmds()
}

void cmdSelecao(): {} {
    <AVALIATE><THIS> expressao() cmdSelecaoOpc() <DOT> cmds()
}

void cmdSelecaoOpc(): {} {
    cmdSelecaoVerdadeiro() | cmdSelecaoFalso()
}

void cmdSelecaoVerdadeiro(): {} {
    <TRUE><RESULT><OPEN_BRACKET> listaDeComandos() <CLOSE_BRACKET> cmdSelecaoFalsoV()
}

void cmdSelecaoVerdadeiroF(): {} {
    (<TRUE><RESULT><OPEN_BRACKET> listaDeComandos() <CLOSE_BRACKET>)?
}

void cmdSelecaoFalso(): {} {
    <UNTRUE><RESULT><OPEN_BRACKET> listaDeComandos() <CLOSE_BRACKET> cmdSelecaoVerdadeiroF()
}

void cmdSelecaoFalsoV(): {} {
    (<UNTRUE><RESULT><OPEN_BRACKET> listaDeComandos() <CLOSE_BRACKET>)?
}

void cmds(): {} {
    (cmdAtribuicao() | cmdEntrada() | cmdSaida() | cmdRepeticao() | cmdSelecao())?
}

void expressao(): {} {
    expressaoAritmeticaOuLogica() expressao1()
}

void expressao1(): {} {
    ( <EQUALS> expressaoAritmeticaOuLogica() | 
        <DIFFERENT> expressaoAritmeticaOuLogica() | 
        <LESS> expressaoAritmeticaOuLogica() | 
        <GREATER> expressaoAritmeticaOuLogica() | 
        <LESS_EQUAL> expressaoAritmeticaOuLogica() |
        <GREATER_EQUAL> expressaoAritmeticaOuLogica() )?
}

void expressaoAritmeticaOuLogica(): {} {
    termo2() menorPrioridade()
}

void menorPrioridade(): {} {
    (<PLUS> menorPrioridade() | <MINUS> menorPrioridade() | <PIPE> menorPrioridade())?
}

void termo2(): {} {
    termo1() mediaPrioridade()
}

void mediaPrioridade(): {} {
    (<MULTIPLY> mediaPrioridade() | <DIVIDER> mediaPrioridade() | <PERCENT> mediaPrioridade() | <MOD> mediaPrioridade() | <AMPERSAND> mediaPrioridade())?
}

void termo1(): {} {
    elemento() maiorPrioridade()
}

void maiorPrioridade(): {} {
    (<POW> elemento() maiorPrioridade())?
}

void elemento(): {} {
    identificadorVar() |<NUMBER_INTEGER>|<NUMBER_REAL>|<LITERAL_CONSTANT>|<TRUE>|<UNTRUE>|<OPEN_PARENTHESIS> expressao() <CLOSE_PARENTHESIS>|<EXCLAMATION><OPEN_PARENTHESIS> expressao() <CLOSE_PARENTHESIS>
}

void indice(): {} {
    (<OPEN_BRACKET><NUMBER_INTEGER><CLOSE_BRACKET>)?
}

void desc(): {} {
    (<DESCRIPTION><LITERAL_CONSTANT>)? 
}

//Special characters ignored
SKIP : {
    " " | "\t" | "\n" | "\r" | "\f"
}

//Single comment
SPECIAL_TOKEN : {
  <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

//Block comment
SKIP : {
    "/*" {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Unfinished block comment", jjmatchedKind);}: commentmultiline
}

<commentmultiline> SKIP : {
    "*/" {OutputData.removeLastOutputInvalid();}: DEFAULT |
    <~[]>
}

//Reserved word
TOKEN [IGNORE_CASE]: {
    <DO: ("do")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <THIS: ("this")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <BODY: ("body")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <DESCRIPTION: ("description")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <DECLARATION: ("declaration")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <TYPE: ("type")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <IS: ("is")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <AS: ("as")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <CONSTANT: ("constant")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <VARIABLE: ("variable")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <AND: ("and")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <INTEGER: ("integer")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <REAL: ("real")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <STRING: ("string")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <LOGIC: ("logic")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <DESIGNATE: ("designate")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <READ: ("read")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <WRITE: ("write")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <ALL: ("all")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <AVALIATE: ("avaliate")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <TRUE: ("true")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <UNTRUE: ("untrue")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <RESULT: ("result")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <REPEAT: ("repeat")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);}
}

//Special symbol
TOKEN : {
    <OPEN_BRACKET: "["> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <CLOSE_BRACKET: "]"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <OPEN_PARENTHESIS: "("> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <CLOSE_PARENTHESIS: ")"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <EQUAL: "="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <DOT: "."> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <COMMA: ","> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);}
}

//Arithmetic operator
TOKEN : {
    <PLUS: "+"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <MINUS: "-"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <MULTIPLY: "*"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <DIVIDER: "/"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <POW: "**"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <PERCENT: "%"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <MOD: "%%"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);}
}

//Relational operator
TOKEN : {
    <EQUALS: "=="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <DIFFERENT: "!="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <LESS: "<<"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <GREATER: ">>"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <LESS_EQUAL: "<<="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <GREATER_EQUAL: ">>="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);}
}

//Logical operator
TOKEN : {
    <AMPERSAND: "&"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <PIPE: "|"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <EXCLAMATION: "!"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);}
}

//Numbers
TOKEN : {
    <#DIGIT: ["0"-"9"]> |
    <#DECIMAL_NUMBER: <DOT><DIGIT>((<DIGIT>)?){2}> |
    <NUMBER_INTEGER: <DIGIT>((<DIGIT>)?){2}> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Integer number", jjmatchedKind);} |
    <NUMBER_REAL: <DIGIT>((<DIGIT>)?){4}<DECIMAL_NUMBER>> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Real number", jjmatchedKind);}
}

//Literal constants
TOKEN : {
    <LITERAL_CONSTANT: "\"" (~["\n","\r","\""])* "\""> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Literal Constant", jjmatchedKind);}
}

//Identifiers
TOKEN : {
    <#UPPER_CASE: ["A"-"Z"]> |
    <#LOWER_CASE: ["a"-"z"]> |
    <#LETTER: (<UPPER_CASE>|<LOWER_CASE>)> |
    <#UNDERLINE: ["_"]> |
    <IDENTIFIER:
        (<LETTER>)+((<DIGIT><UNDERLINE>)?|(<DIGIT><LETTER>)*)(<UNDERLINE>|(<UNDERLINE>)?<LETTER>((<DIGIT><UNDERLINE>)?|(<DIGIT><LETTER>)*)|<LETTER>)*
    > {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Identifier", jjmatchedKind);}
}

//Errors
SPECIAL_TOKEN : {
    <#INEQUALITY_MINUS: ["<"]> |
    <#INEQUALITY_PLUS: [">"]> |
    <INVALID_SIMBOLS: (~["a"-"z","A"-"Z","0"-"9","\"","[","]","(",")",",",".","=","!",">","<","+","-","_","*","&","/","%","|","\n","\r","\t"," "])+> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid symbols", jjmatchedKind);} |
    <INVALID_INTEGER_NUMBER: <DIGIT>((<DIGIT>)?){2}(<DIGIT>)+> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid integer number", jjmatchedKind);} |
    <INVALID_REAL_NUMBER: 
        <DIGIT>((<DIGIT>)?){4}<DOT> |
        <DIGIT>((<DIGIT>)?){4}(<DIGIT>)+<DOT><DIGIT>((<DIGIT>){2})(<DIGIT>)+ |
        <DOT>(<DIGIT>)+
    > {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid real number", jjmatchedKind);} |
    <INVALID_LITERAL_CONSTANT: "\"" (~["\n","\r","\""])* ~["\""]> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid literal constant", jjmatchedKind);} |
    <INVALID_IDENTIFIER: 
        <LETTER>(<LETTER>|<DIGIT>|<UNDERLINE>)*<DIGIT><DIGIT>(<LETTER>|<DIGIT>|<UNDERLINE>)* |
        (<DIGIT>|<UNDERLINE>)(<LETTER>|<DIGIT>|<UNDERLINE>)* |
        (<LETTER>|<DIGIT>|<UNDERLINE>)*<UNDERLINE><DIGIT>(<LETTER>|<DIGIT>|<UNDERLINE>)* |
        (<LETTER>|<DIGIT>|<UNDERLINE>)*<DIGIT>
    > {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid identifier", jjmatchedKind);}
}