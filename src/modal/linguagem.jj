options {
    STATIC = false;
}

PARSER_BEGIN(Parser)

public class Parser {
    public static Semantic semantic;

    public Parser(){}

    public void execute() throws ParseException {
        Token token = getNextToken();
        
        
        while(token.kind != 0){
            token = getNextToken();
        }
    }
    
    public ArrayList syntaxAnalisys() throws ParseException {
        semantic = new Semantic();
        programa();
        return semantic.getErros();
    }
}

PARSER_END(Parser)


void programa(): {} {
    <DO><THIS><IDENTIFIER> {semantic.Action01(token.image);} <OPEN_BRACKET><CLOSE_BRACKET> declaracao() corpoDoPrograma() comentario() {semantic.Action02(token.image);}
}

void comentario(): {} {
    (<DESCRIPTION><LITERAL_CONSTANT>)?
}

void declaracao(): {} {
    (<DECLARATION> declaracao1())?
}

void declaracao1(): {} {
    <TYPE><OPEN_BRACKET> declaracaoDeTipoEnumerado() <CLOSE_BRACKET> declaracao2() | declaracaoDeConstantesEVariaveis()
}

void declaracao2(): {} {
    (<DECLARATION> declaracaoDeConstantesEVariaveis())?
}

void declaracaoDeTipoEnumerado(): {} {
    <IDENTIFIER> {semantic.Action03(token.image);} <IS> listaDeIdentificadoresDeConstantesTipoEnumerado() <DOT> declaracaoDeTipoEnumerado1()
}

void declaracaoDeTipoEnumerado1(): {} {
    (declaracaoDeTipoEnumerado())?
}

void listaDeIdentificadoresDeConstantesTipoEnumerado(): {} {
    <IDENTIFIER> {semantic.Action04(token.image);} listaDeIdentificadoresDeConstantesTipoEnumerado1()
}

void listaDeIdentificadoresDeConstantesTipoEnumerado1(): {} {
    (<COMMA> listaDeIdentificadoresDeConstantesTipoEnumerado())?
}

void declaracaoDeConstantesEVariaveis(): {} {
    <CONSTANT><AND><VARIABLE><OPEN_BRACKET> constantesEVariaveis() <CLOSE_BRACKET>
}

void constantesEVariaveis(): {} {
    <AS> constantesEVariaveis1()
}

void constantesEVariaveis1(): {} {
    declaracaoDeConstantes() variaveis2() | declaracaoDeVariaveis() constantes2()
}

void declaracaoDeConstantes(): {} {
    <CONSTANT> {semantic.Action05();} constantes()
}

void constantes(): {} {
    listaDeIdentificadoresDeConstantes() <IS> tipo() {semantic.Action06();} <EQUAL> valor() {semantic.Action07(token.image);} <DOT> constantes1()
}

void constantes1(): {} {
    (constantes())?
}

void constantes2(): {} {
    (<AS> declaracaoDeConstantes())?
}

void declaracaoDeVariaveis(): {} {
    <VARIABLE> {semantic.Action08(token.image);} variaveis()
}

void variaveis(): {} {
    listaDeIdentificadoresDeVariaveis() <IS> tipo() {semantic.Action06();} <DOT> variaveis1()
}

void variaveis1(): {} {
    (variaveis())?
}

void variaveis2(): {} {
    (<AS> declaracaoDeVariaveis())?
}

void listaDeIdentificadoresDeConstantes(): {} {
    <IDENTIFIER> {semantic.Action09(token.image);} listaDeIdentificadoresDeConstantes1()
}

void listaDeIdentificadoresDeConstantes1(): {} {
    (<COMMA> listaDeIdentificadoresDeConstantes())?
}

void listaDeIdentificadoresDeVariaveis(): {} {
    <IDENTIFIER> {semantic.Action10(token.image);} indice() {semantic.Action11(token.image);} listaDeIdentificadoresDeVariaveis1()
}

void listaDeIdentificadoresDeVariaveis1(): {} {
    (<COMMA> listaDeIdentificadoresDeVariaveis())?
}

void indice(): {} {
    (<OPEN_KEYS><NUMBER_INTEGER> {semantic.Action12(token.image);} <CLOSE_KEYS>)?
}

void tipo(): {} {
    <INTEGER> {semantic.Action13();} | <REAL> {semantic.Action14();} | <STRING> {semantic.Action15();} | <LOGIC> {semantic.Action16();} | <IDENTIFIER> {semantic.Action17();}
}

void valor(): {} {
    <NUMBER_INTEGER> | <NUMBER_REAL> | <LITERAL_CONSTANT>
}

void corpoDoPrograma(): {} {
    <BODY><OPEN_BRACKET> listaDeComandos() <CLOSE_BRACKET>
}

void listaDeComandos(): {} {
    comando() listaDeComandos1()
}

void listaDeComandos1(): {} {
    (listaDeComandos())?
}

void comando(): {} {
    atribuicao() | entrada() | saida() | selecao() | repeticao()
}

void atribuicao(): {} {
    <DESIGNATE><THIS> {semantic.Action18();} listaDeIdentificadoresDeVariaveis() <AS> expressao() {semantic.Action19();} <DOT>
}

void entrada(): {} {
    <READ><THIS> {semantic.Action20();} <OPEN_BRACKET> listaDeIdentificadoresDeVariaveis() <CLOSE_BRACKET><DOT>
}

void saida(): {} {
    <WRITE> saida1()
}

void saida1(): {} {
    <ALL><THIS> {semantic.Action21();} <OPEN_BRACKET> listaDeIdentificadoresEOuConstantes() <CLOSE_BRACKET><DOT> | <THIS> {semantic.Action22();} <OPEN_BRACKET> listaDeIdentificadoresEOuConstantes() <CLOSE_BRACKET><DOT>
}

void listaDeIdentificadoresEOuConstantes(): {} {
    item() {semantic.Action23();} listaDeIdentificadoresEOuConstantes1()
}

void listaDeIdentificadoresEOuConstantes1(): {} {
    (<COMMA> listaDeIdentificadoresEOuConstantes())?
}

void item(): {} {
    <IDENTIFIER> {semantic.Action24(token.image);} indice() {semantic.Action25(token.image);} | <NUMBER_INTEGER> {semantic.Action26(token.image);} | <NUMBER_REAL> {semantic.Action27(token.image);} | <LITERAL_CONSTANT> {semantic.Action28(token.image);}
}

void selecao(): {} {
    <AVALIATE><THIS> expressao() selecao1() {semantic.Action29();}
}

void selecao1(): {} {
    <TRUE><RESULT> {semantic.Action30();} <OPEN_BRACKET> listaDeComandos() <CLOSE_BRACKET> falsa() <DOT> | <UNTRUE><RESULT> {semantic.Action31();} <OPEN_BRACKET> listaDeComandos() <CLOSE_BRACKET> verdadeira() <DOT>
}

void verdadeira(): {} {
    (<TRUE><RESULT> {semantic.Action32(token.image);} <OPEN_BRACKET> listaDeComandos() <CLOSE_BRACKET>)?
}

void falsa(): {} {
    (<UNTRUE><RESULT> {semantic.Action32(token.image);} <OPEN_BRACKET> listaDeComandos() <CLOSE_BRACKET>)?
}

void repeticao(): {} {
    <REPEAT><THIS> {semantic.Action33(token.image);} expressao() {semantic.Action34(token.image);} <OPEN_BRACKET> listaDeComandos() <CLOSE_BRACKET> {semantic.Action35(token.image);} <DOT>
}

void expressao(): {} {
    expressaoAritmeticaOuLogica() expressao1()
}

void expressao1(): {} {
    ( <EQUALS> expressaoAritmeticaOuLogica() {semantic.Action36();} | <DIFFERENT> expressaoAritmeticaOuLogica() {semantic.Action37();} | <LESS> expressaoAritmeticaOuLogica() {semantic.Action38();} | <GREATER> expressaoAritmeticaOuLogica() {semantic.Action39();} | <LESS_EQUAL> expressaoAritmeticaOuLogica() {semantic.Action40();} | <GREATER_EQUAL> expressaoAritmeticaOuLogica() {semantic.Action41();} )?
}

void expressaoAritmeticaOuLogica(): {} {
    termo2() menorPrioridade()
}

void menorPrioridade(): {} {
    ( <PLUS> termo2() menorPrioridade() {semantic.Action42();} | <MINUS> termo2() menorPrioridade() {semantic.Action43();} | <PIPE> termo2() menorPrioridade() {semantic.Action44();} )?
}

void termo2(): {} {
    termo1() mediaPrioridade()
}

void mediaPrioridade(): {} {
    ( <MULTIPLY> termo1() mediaPrioridade() {semantic.Action45();} | <DIVIDER> termo1() mediaPrioridade() {semantic.Action46();} | <PERCENT> termo1() mediaPrioridade() {semantic.Action47();} | <MOD> termo1() mediaPrioridade() {semantic.Action48();} | <AMPERSAND> termo1() mediaPrioridade() {semantic.Action49();} )?
}

void termo1(): {} {
    elemento() maiorPrioridade()
}

void maiorPrioridade(): {} {
    (<POW> elemento() maiorPrioridade() {semantic.Action50();})?
}

void elemento(): {} {
    <IDENTIFIER> {semantic.Action24(token.image);} indice() {semantic.Action51();} | <NUMBER_INTEGER> {semantic.Action26(token.image);} | <NUMBER_REAL> {semantic.Action27(token.image);} | <LITERAL_CONSTANT> {semantic.Action28(token.image);} | <TRUE> {semantic.Action52();} | <UNTRUE> {semantic.Action53();} | <OPEN_PARENTHESIS> expressao() <CLOSE_PARENTHESIS> | <EXCLAMATION><OPEN_PARENTHESIS> expressao() <CLOSE_PARENTHESIS> {semantic.Action54();}
}


//Special characters ignored
SKIP : {
    " " | "\t" | "\n" | "\r" | "\f"
}

//Single comment
SPECIAL_TOKEN : {
  <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

//Block comment
SKIP : {
    "/*" {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Unfinished block comment", jjmatchedKind);}: commentmultiline
}

<commentmultiline> SKIP : {
    "*/" {OutputData.removeLastOutputInvalid();}: DEFAULT |
    <~[]>
}

//Reserved word
TOKEN [IGNORE_CASE]: {
    <DO: ("do")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <THIS: ("this")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <BODY: ("body")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <DESCRIPTION: ("description")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <DECLARATION: ("declaration")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <TYPE: ("type")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <IS: ("is")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <AS: ("as")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <CONSTANT: ("constant")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <VARIABLE: ("variable")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <AND: ("and")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <INTEGER: ("integer")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <REAL: ("real")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <STRING: ("string")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <LOGIC: ("logic")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <DESIGNATE: ("designate")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <READ: ("read")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <WRITE: ("write")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <ALL: ("all")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <AVALIATE: ("avaliate")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <TRUE: ("true")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <UNTRUE: ("untrue")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <RESULT: ("result")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <REPEAT: ("repeat")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);}
}

//Special symbol
TOKEN : {
    <OPEN_KEYS: "{"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <CLOSE_KEYS: "}"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <OPEN_BRACKET: "["> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <CLOSE_BRACKET: "]"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <OPEN_PARENTHESIS: "("> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <CLOSE_PARENTHESIS: ")"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <EQUAL: "="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <DOT: "."> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <COMMA: ","> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);}
}

//Arithmetic operator
TOKEN : {
    <PLUS: "+"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <MINUS: "-"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <MULTIPLY: "*"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <DIVIDER: "/"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <POW: "**"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <PERCENT: "%"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <MOD: "%%"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);}
}

//Relational operator
TOKEN : {
    <EQUALS: "=="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <DIFFERENT: "!="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <LESS: "<<"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <GREATER: ">>"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <LESS_EQUAL: "<<="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <GREATER_EQUAL: ">>="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);}
}

//Logical operator
TOKEN : {
    <AMPERSAND: "&"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <PIPE: "|"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <EXCLAMATION: "!"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);}
}

//Numbers
TOKEN : {
    <#DIGIT: ["0"-"9"]> |
    <#DECIMAL_NUMBER: <DOT><DIGIT>((<DIGIT>)?){2}> |
    <NUMBER_INTEGER: <DIGIT>((<DIGIT>)?){2}> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Integer number", jjmatchedKind);} |
    <NUMBER_REAL: <DIGIT>((<DIGIT>)?){4}<DECIMAL_NUMBER>> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Real number", jjmatchedKind);}
}

//Literal constants
TOKEN : {
    <LITERAL_CONSTANT: "\"" (~["\n","\r","\""])* "\""> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Literal Constant", jjmatchedKind);}
}

//Identifiers
TOKEN : {
    <#UPPER_CASE: ["A"-"Z"]> |
    <#LOWER_CASE: ["a"-"z"]> |
    <#LETTER: (<UPPER_CASE>|<LOWER_CASE>)> |
    <#UNDERLINE: ["_"]> |
    <IDENTIFIER:
        (<LETTER>)+((<DIGIT><UNDERLINE>)?|(<DIGIT><LETTER>)*)(<UNDERLINE>|(<UNDERLINE>)?<LETTER>((<DIGIT><UNDERLINE>)?|(<DIGIT><LETTER>)*)|<LETTER>)*
    > {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Identifier", jjmatchedKind);}
}

//Errors
SPECIAL_TOKEN : {
    <#INEQUALITY_MINUS: ["<"]> |
    <#INEQUALITY_PLUS: [">"]> |
    <INVALID_SIMBOLS: (~["a"-"z","A"-"Z","0"-"9","\"","{","}","[","]","(",")",",",".","=","!",">","<","+","-","_","*","&","/","%","|","\n","\r","\t"," "])+> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid symbols", jjmatchedKind);} |
    <INVALID_INTEGER_NUMBER: <DIGIT>((<DIGIT>)?){2}(<DIGIT>)+> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid integer number", jjmatchedKind);} |
    <INVALID_REAL_NUMBER: 
        <DIGIT>((<DIGIT>)?){4} |
        <DIGIT>((<DIGIT>)?){4}(<DIGIT>)+<DOT><DIGIT>((<DIGIT>){2})(<DIGIT>)+ |
        <DOT>(<DIGIT>)+
    > {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid real number", jjmatchedKind);} |
    <INVALID_LITERAL_CONSTANT: "\"" (~["\n","\r","\""])* ~["\""]> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid literal constant", jjmatchedKind);} |
    <INVALID_IDENTIFIER: 
        <LETTER>(<LETTER>|<DIGIT>|<UNDERLINE>)*<DIGIT><DIGIT>(<LETTER>|<DIGIT>|<UNDERLINE>)* |
        (<DIGIT>|<UNDERLINE>)(<LETTER>|<DIGIT>|<UNDERLINE>)* |
        (<LETTER>|<DIGIT>|<UNDERLINE>)*<UNDERLINE><DIGIT>(<LETTER>|<DIGIT>|<UNDERLINE>)* |
        (<LETTER>|<DIGIT>|<UNDERLINE>)*<DIGIT>
    > {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid identifier", jjmatchedKind);}
}