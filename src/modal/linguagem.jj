options {
    STATIC = false;
}

PARSER_BEGIN(Parser)

public class Parser {
    public Parser(){}

    public void execute() throws ParseException {
        Token token = getNextToken();
        
        while(token.kind != 0){
            token = getNextToken();
        }
    }
}

PARSER_END(Parser)

//Special characters ignored
SKIP : {
    " " | "\t" | "\n" | "\r" | "\f"
}

//Single comment
SPECIAL_TOKEN : {
  <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

//Block comment
SKIP : {
    "/*" {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Unfinished block comment", jjmatchedKind);}: commentmultiline
}

<commentmultiline> SKIP : {
    "*/" {OutputData.removeLastOutputInvalid();}: DEFAULT |
    <~[]>
}

//Reserved word
TOKEN [IGNORE_CASE]: {
    <DO: ("do")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <THIS: ("this")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <BODY: ("body")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <DESCRIPTION: ("description")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <DECLARATION: ("declaration")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <TYPE: ("type")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <IS: ("is")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <AS: ("as")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <CONSTANT: ("constant")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <VARIABLE: ("variable")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <AND: ("and")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <INTEGER: ("integer")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <REAL: ("real")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <STRING: ("string")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <LOGIC: ("logic")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <DESIGNATE: ("designate")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <READ: ("read")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <WRITE: ("write")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <ALL: ("all")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <AVALIATE: ("avaliate")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <TRUE: ("true")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <UNTRUE: ("untrue")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <RESULT: ("result")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);} |
    <REPEAT: ("repeat")> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Reserved word", jjmatchedKind);}
}

//Special symbol
TOKEN : {
    <OPEN_BRACKET: "["> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <CLOSE_BRACKET: "]"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <OPEN_PARENTHESIS: "("> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <CLOSE_PARENTHESIS: ")"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <EQUAL: "="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <DOT: "."> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);} |
    <COMMA: ","> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Special symbol", jjmatchedKind);}
}

//Arithmetic operator
TOKEN : {
    <PLUS: "+"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Arithmetic operator", jjmatchedKind);} |
    <MINUS: "-"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Arithmetic operator", jjmatchedKind);} |
    <MULTIPLY: "*"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Arithmetic operator", jjmatchedKind);} |
    <DIVIDER: "/"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Arithmetic operator", jjmatchedKind);} |
    <POW: "**"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Arithmetic operator", jjmatchedKind);} |
    <PERCENT: "%"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Arithmetic operator", jjmatchedKind);} |
    <MOD: "%%"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Arithmetic operator", jjmatchedKind);}
}

//Relational operator
TOKEN : {
    <EQUALS: "=="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Relational operator", jjmatchedKind);} |
    <DIFFERENT: "!="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Relational operator", jjmatchedKind);} |
    <LESS: "<<"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Relational operator", jjmatchedKind);} |
    <GREATER: ">>"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Relational operator", jjmatchedKind);} |
    <LESS_EQUAL: "<<="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Relational operator", jjmatchedKind);} |
    <GREATER_EQUAL: ">>="> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Relational operator", jjmatchedKind);}
}

//Logical operator
TOKEN : {
    <AMPERSAND: "&"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Logical operator", jjmatchedKind);} |
    <PIPE: "|"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Logical operator", jjmatchedKind);} |
    <EXCLAMATION: "!"> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Logical operator", jjmatchedKind);}
}

//Numbers
TOKEN : {
    <#DIGIT: ["0"-"9"]> |
    <#DECIMAL_NUMBER: <DOT><DIGIT>((<DIGIT>)?){2}> |
    <NUMBER_INTEGER: <DIGIT>((<DIGIT>)?){2}> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Integer number", jjmatchedKind);} |
    <NUMBER_REAL: <DIGIT>((<DIGIT>)?){4}<DECIMAL_NUMBER>> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Real number", jjmatchedKind);}
}

//Literal constants
TOKEN : {
    <LITERAL_CONSTANT: "\"" (~["\n","\r","\""])* "\""> {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Literal Constant", jjmatchedKind);}
}

//Identifiers
TOKEN : {
    <#UPPER_CASE: ["A"-"Z"]> |
    <#LOWER_CASE: ["a"-"z"]> |
    <#LETTER: (<UPPER_CASE>|<LOWER_CASE>)> |
    <#UNDERLINE: ["_"]> |
    <IDENTIFIER:
        (<LETTER>)+(<DIGIT>(<UNDERLINE>|<LETTER>))?(<UNDERLINE>|(<UNDERLINE>)?<LETTER><DIGIT>(<UNDERLINE>|<LETTER>)+|<LETTER>)*
    > {OutputData.addOutputValid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Identifier", jjmatchedKind);}
}

//Errors
SPECIAL_TOKEN : {
    <#INEQUALITY_MINUS: ["<"]> |
    <#INEQUALITY_PLUS: [">"]> |
    <INVALID_SIMBOLS: (~["a"-"z","A"-"Z","0"-"9","\"","[","]","(",")",",",".","=","!",">","<","+","-","_","*","&","/","%","|","\n","\r","\t"," "])+> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid symbols", jjmatchedKind);} |
    <INVALID_ARITHMETIC_OPERATOR:
        <PLUS>(<PLUS>)+ |
        <MINUS>(<MINUS>)+ |
        <DIVIDER>(<DIVIDER>)+ |
        <POW>(<MULTIPLY>|<POW>)+ |
        <MOD>(<PERCENT>|<MOD>)+> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid arithmetic operator", jjmatchedKind);} |
    <INVALID_RELATIONAL_OPERATOR:
        <EQUALS>(<EQUAL>)+ |
        <DIFFERENT>(<EQUAL>)+ |
        <LESS>(<INEQUALITY_MINUS>)+ |
        <GREATER>(<INEQUALITY_PLUS>)+ |
        <LESS_EQUAL>(<EQUAL>)+ |
        <GREATER_EQUAL>(<EQUAL>)+> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid relational operator", jjmatchedKind);} |
    <INVALI_LOGICAL_OPERATOR:
        <AMPERSAND>(<AMPERSAND>)+ |
        <PIPE>(<PIPE>)+ |
        <EXCLAMATION>(<EXCLAMATION>)+> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid logical operator", jjmatchedKind);} |
    <INVALID_INTEGER_NUMBER: <DIGIT>((<DIGIT>)?){2}(<DIGIT>)+> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid integer number", jjmatchedKind);} |
    <INVALID_REAL_NUMBER: 
        <DIGIT>((<DIGIT>)?){4}<DOT> |
        <DIGIT>((<DIGIT>)?){4}(<DIGIT>)+<DOT><DIGIT>((<DIGIT>){2})(<DIGIT>)+ |
        <DOT>(<DIGIT>)+
    > {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid real number", jjmatchedKind);} |
    <INVALID_LITERAL_CONSTANT: "\"" (~["\n","\r","\""])* ~["\""]> {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid literal constant", jjmatchedKind);} |
    <INVALID_IDENTIFIER: 
        <LETTER>(<LETTER>|<DIGIT>|<UNDERLINE>)*<DIGIT>(<DIGIT>)+(<LETTER>|<UNDERLINE>)* |
        <LETTER>(<LETTER>|<DIGIT>|<UNDERLINE>)*(<DIGIT>)+ | 
        <LETTER>(<LETTER>|<DIGIT>)*(<UNDERLINE>)+<DIGIT>(<LETTER>|<DIGIT>|<UNDERLINE>)* |
        (<DIGIT>)+(<LETTER>|<DIGIT>|<UNDERLINE>)* |
        <UNDERLINE>(<LETTER>|<DIGIT>|<UNDERLINE>)*
    > {OutputData.addOutputInvalid(image.toString(), input_stream.getEndLine(), input_stream.getBeginColumn(), "Invalid identifier", jjmatchedKind);}
}