/**
 * @author Gabriel Hegler Klok
 * @since 2019/08
 */
package modal;

/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int PROGRAM = 10;
  /** RegularExpression Id. */
  int EXECUTE = 11;
  /** RegularExpression Id. */
  int THIS = 12;
  /** RegularExpression Id. */
  int PURPOSE = 13;
  /** RegularExpression Id. */
  int DECLARE = 14;
  /** RegularExpression Id. */
  int AS = 15;
  /** RegularExpression Id. */
  int CONSTANT = 16;
  /** RegularExpression Id. */
  int VARIABLE = 17;
  /** RegularExpression Id. */
  int INTEGER = 18;
  /** RegularExpression Id. */
  int REAL = 19;
  /** RegularExpression Id. */
  int STRING = 20;
  /** RegularExpression Id. */
  int BOOLEAN = 21;
  /** RegularExpression Id. */
  int ASSIGN = 22;
  /** RegularExpression Id. */
  int ACQUIRE = 23;
  /** RegularExpression Id. */
  int SHOW = 24;
  /** RegularExpression Id. */
  int PUT = 25;
  /** RegularExpression Id. */
  int CHECK = 26;
  /** RegularExpression Id. */
  int TRUE = 27;
  /** RegularExpression Id. */
  int RESULT = 28;
  /** RegularExpression Id. */
  int UNTRUE = 29;
  /** RegularExpression Id. */
  int CARRY = 30;
  /** RegularExpression Id. */
  int OUT = 31;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 32;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 33;
  /** RegularExpression Id. */
  int OPEN_PARENTHESIS = 34;
  /** RegularExpression Id. */
  int CLOSE_PARENTHESIS = 35;
  /** RegularExpression Id. */
  int EQUAL = 36;
  /** RegularExpression Id. */
  int DOT = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int PLUS = 39;
  /** RegularExpression Id. */
  int MINUS = 40;
  /** RegularExpression Id. */
  int MULTIPLY = 41;
  /** RegularExpression Id. */
  int DIVIDER = 42;
  /** RegularExpression Id. */
  int POW = 43;
  /** RegularExpression Id. */
  int PERCENT = 44;
  /** RegularExpression Id. */
  int MOD = 45;
  /** RegularExpression Id. */
  int EQUALS = 46;
  /** RegularExpression Id. */
  int DIFFERENT = 47;
  /** RegularExpression Id. */
  int LESS = 48;
  /** RegularExpression Id. */
  int GREATER = 49;
  /** RegularExpression Id. */
  int LESS_EQUAL = 50;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 51;
  /** RegularExpression Id. */
  int AMPERSAND = 52;
  /** RegularExpression Id. */
  int PIPE = 53;
  /** RegularExpression Id. */
  int EXCLAMATION = 54;
  /** RegularExpression Id. */
  int DIGIT = 55;
  /** RegularExpression Id. */
  int DECIMAL_NUMBER = 56;
  /** RegularExpression Id. */
  int NUMBER_INTEGER = 57;
  /** RegularExpression Id. */
  int NUMBER_REAL = 58;
  /** RegularExpression Id. */
  int LITERAL_CONSTANT = 59;
  /** RegularExpression Id. */
  int UPPER_CASE = 60;
  /** RegularExpression Id. */
  int LOWER_CASE = 61;
  /** RegularExpression Id. */
  int LETTER = 62;
  /** RegularExpression Id. */
  int UNDERLINE = 63;
  /** RegularExpression Id. */
  int IDENTIFIER = 64;
  /** RegularExpression Id. */
  int INEQUALITY_MINUS = 65;
  /** RegularExpression Id. */
  int INEQUALITY_PLUS = 66;
  /** RegularExpression Id. */
  int INVALID_SIMBOLS = 67;
  /** RegularExpression Id. */
  int INVALID_ARITHMETIC_OPERATOR = 68;
  /** RegularExpression Id. */
  int INVALID_RELATIONAL_OPERATOR = 69;
  /** RegularExpression Id. */
  int INVALI_LOGICAL_OPERATOR = 70;
  /** RegularExpression Id. */
  int INVALID_INTEGER_NUMBER = 71;
  /** RegularExpression Id. */
  int INVALID_REAL_NUMBER = 72;
  /** RegularExpression Id. */
  int INVALID_LITERAL_CONSTANT = 73;
  /** RegularExpression Id. */
  int INVALID_IDENTIFIER = 74;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int commentmultiline = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "\"kk-\"",
    "\"-kk\"",
    "<token of kind 9>",
    "\"program\"",
    "\"execute\"",
    "\"this\"",
    "\"purpose\"",
    "\"declare\"",
    "\"as\"",
    "\"constant\"",
    "\"variable\"",
    "\"integer\"",
    "\"real\"",
    "\"string\"",
    "\"boolean\"",
    "\"assign\"",
    "\"acquire\"",
    "\"show\"",
    "\"put\"",
    "\"check\"",
    "\"true\"",
    "\"result\"",
    "\"untrue\"",
    "\"carry\"",
    "\"out\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\".\"",
    "\",\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"**\"",
    "\"%\"",
    "\"%%\"",
    "\"==\"",
    "\"!=\"",
    "\"<<\"",
    "\">>\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "<DIGIT>",
    "<DECIMAL_NUMBER>",
    "<NUMBER_INTEGER>",
    "<NUMBER_REAL>",
    "<LITERAL_CONSTANT>",
    "<UPPER_CASE>",
    "<LOWER_CASE>",
    "<LETTER>",
    "<UNDERLINE>",
    "<IDENTIFIER>",
    "<INEQUALITY_MINUS>",
    "<INEQUALITY_PLUS>",
    "<INVALID_SIMBOLS>",
    "<INVALID_ARITHMETIC_OPERATOR>",
    "<INVALID_RELATIONAL_OPERATOR>",
    "<INVALI_LOGICAL_OPERATOR>",
    "<INVALID_INTEGER_NUMBER>",
    "<INVALID_REAL_NUMBER>",
    "<INVALID_LITERAL_CONSTANT>",
    "<INVALID_IDENTIFIER>",
  };

}
